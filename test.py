import num_recog as nr
import numpy as np
import cv2
import time
from matplotlib import pyplot as plt
digitos=[
[[1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
 [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
 [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
 [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
 [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
 [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
 [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
 [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
 [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
 [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
 [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1]],

[[1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1],
 [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
 [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
 [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],

[[1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
 [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1],
 [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
 [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
 [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
 [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
 [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
 [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1],
 [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1],
 [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],


[[1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1],
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
 [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1],
 [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
 [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
 [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
 [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1],
 [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
 [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
 [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
 [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
 [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
 [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
 [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1]],


[[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1],
 [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
 [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
 [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
 [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
 [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1],
 [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1],
 [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
 [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
 [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1]],

[[1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1],
  [1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1],
  [1,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1],
  [1,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1],
  [1,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1],
  [1,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1],
  [1,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1],
  [1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1],
  [1,   1,   1,   1,   1,   1,   0,   0,   0,   0,   0],
  [1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0],
  [1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0],
  [1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0],
  [1,   1,   1,   1,   1,   1,   0,   0,   0,   0,   1],
  [0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1],
  [0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1]],


[[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1],
 [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
 [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
 [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
 [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
 [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
 [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
 [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
 [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
 [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
 [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1]],


 [[0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
  [0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
  [1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0],
  [1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0],
  [1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   1],
  [1,   1,   1,   1,   1,   1,   0,   0,   0,   0,   1],
  [1,   1,   1,   1,   1,   1,   0,   0,   0,   1,   1],
  [1,   1,   1,   1,   1,   0,   0,   0,   0,   1,   1],
  [1,   1,   1,   1,   1,   0,   0,   0,   1,   1,   1],
  [1,   1,   1,   1,   0,   0,   0,   0,   1,   1,   1],
  [1,   1,   1,   1,   0,   0,   0,   1,   1,   1,   1],
  [1,   1,   1,   0,   0,   0,   0,   1,   1,   1,   1],
  [1,   1,   1,   0,   0,   0,   1,   1,   1,   1,   1],
  [1,   1,   0,   0,   0,   0,   1,   1,   1,   1,   1],
  [1,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1]],


 [[1,   1,   0,   0,   0,   0,   0,   0,   0,   1,   1],
  [1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
  [0,   0,   0,   0,   1,   1,   1,   0,   0,   0,   0],
  [0,   0,   0,   1,   1,   1,   1,   1,   0,   0,   0],
  [0,   0,   0,   0,   1,   1,   1,   0,   0,   0,   0],
  [1,   0,   0,   0,   0,   1,   0,   0,   0,   0,   1],
  [1,   1,   0,   0,   0,   0,   0,   0,   0,   1,   1],
  [1,   1,   0,   0,   0,   0,   0,   0,   0,   1,   1],
  [1,   0,   0,   0,   0,   1,   0,   0,   0,   0,   1],
  [0,   0,   0,   0,   1,   1,   1,   0,   0,   0,   0],
  [0,   0,   0,   1,   1,   1,   1,   1,   0,   0,   0],
  [0,   0,   0,   1,   1,   1,   1,   1,   0,   0,   0],
  [0,   0,   0,   0,   1,   1,   1,   0,   0,   0,   0],
  [0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1],
  [1,   1,   0,   0,   0,   0,   0,   0,   0,   1,   1]],

 [[1,   1,   0,   0,   0,   0,   0,   0,   1,   1,   1],
  [1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1],
  [0,   0,   0,   0,   1,   1,   0,   0,   0,   0,   1],
  [0,   0,   0,   1,   1,   1,   1,   0,   0,   0,   0],
  [0,   0,   0,   1,   1,   1,   1,   1,   0,   0,   0],
  [0,   0,   0,   1,   1,   1,   1,   1,   0,   0,   0],
  [0,   0,   0,   0,   1,   1,   1,   0,   0,   0,   0],
  [0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
  [1,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0],
  [1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0],
  [1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0],
  [1,   1,   1,   1,   1,   1,   0,   0,   0,   0,   1],
  [1,   1,   1,   1,   1,   0,   0,   0,   0,   0,   1],
  [0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1],
  [0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1]]


]

hogs = [
        [ 67390.53344727,128836.40759277, 36470.06115723,48846.10302734,
         50287.21289062, 32826.67004395, 40337.6663208,  49281.4664917,
         67390.53344727, 128836.40759277, 36470.06115723, 48846.10302734,
         50287.21289062, 32826.67004395, 40337.6663208,  49281.4664917 ],
         [363120.0,             0.0  ,           0.0,         38197.8605957,
         43884.24755859,  9243.53027344, 28368.04107666, 42493.31066895,
         223044.93652344, 35252.8861084,  25210.74267578, 23358.47558594,
         121788.47558594,  9243.53027344, 33449.76379395, 30099.41333008],
        [32382.140625,  131194.30834961, 77788.13391113, 51190.88623047,
         99505.93139648, 16074.83361816, 35233.91650391, 14852.12841797,
         76616.12719727, 217872.69671631, 43413.96240234,  1803.12231445,
         169381.48071289, 23489.1730957,  25122.58361816, 19766.67480469],
        [ 53860.67272949, 39075.10778809, 17857.5690918,  41783.04101562,
         144410.83911133, 85534.07250977, 81272.75366211, 35925.78759766,
         78716.10498047, 60558.99884033, 84397.7890625,  82969.31640625,
         155959.89697266, 17058.5078125,  26355.87902832, 21241.91552734],
        [152731.65319824, 49331.8503418,  10973.44152832, 35997.06713867,
         120575.64892578, 17970.48083496, 49751.86297607, 58546.51599121,
         128247.5567627, 163061.57836914, 17762.38085938, 11247.16210938,
         51523.41113281,  5781.24951172, 20940.63647461, 29162.59460449],
        [ 59321.96606445, 50407.69494629, 36333.13708496, 74171.88989258,
         197060.88891602, 34018.93579102, 41154.79498291, 31104.36914062,
         95170.42285156, 39819.59820557, 18485.36181641, 52711.00878906,
         224266.09887695, 66168.55114746, 26553.50439453, 23358.47558594],
        [ 88686.49945068, 64486.34143066, 69387.99658203, 107374.43188477,
         70890.00,        24435.77148438, 52946.96154785, 18124.44067383,
         84136.56933594, 66446.05419922, 45286.45092773, 21569.16967773,
         212044.11572266, 51906.71643066, 57385.59716797, 41150.94799805],
        [ 58664.30224609, 241533.40905762,  2973.78540039,     0.0,
         209333.10180664, 17850.53662109, 20200.82043457,  5701.97314453,
         50292.66796875, 321939.31817627,     0.0  ,           0.0,
          9690.0  ,           0.0    ,         0.0  ,           0.0 ],
        [ 89025.35888672, 58764.04443359, 64396.53820801, 21148.76635742,
         142698.54052734, 70441.70568848, 52677.8236084,  62264.63598633,
         65153.89672852, 70905.02636719, 52729.3223877,  21355.10571289,
         142367.86474609, 58774.48986816, 64515.32775879, 38317.45556641],
        [ 87968.27490234, 67572.32287598, 35012.97924805, 33050.62866211,
         203042.92285156, 53198.07385254, 53288.52697754, 35123.35595703,
         55875.88232422, 92196.46154785, 70777.94384766, 48021.05566406,
         141780.0,         29392.08056641, 58580.6517334,  18124.44067383]
    ]

cap = cv2.VideoCapture("./video2.avi")
while not cap.isOpened():
    cap = cv2.VideoCapture("./video2.avi")
    cv2.waitKey(1000)
    print("Wait for the header")

pos_frame = cap.get(cv2.CAP_PROP_POS_FRAMES)

def hog(img):
    img = cv2.cvtColor(np.float32(img), cv2.COLOR_RGB2GRAY)
    gx = cv2.Sobel(img,cv2.CV_32F,1,0,ksize=5)
    gy = cv2.Sobel(img,cv2.CV_32F,0,1,ksize=5)
    mag, ang = cv2.cartToPolar(gx, gy)

    bin_n = 18 # Number of bins
    bin = np.int32(bin_n*ang/(2*np.pi))
    hist = np.bincount(bin.ravel(),mag.ravel(),bin_n)
    #print(hist)
    return hist

# i = 0
# for n in digitos:
#     #print(n)
#     a, b = np.shape(n)
#     img = np.zeros([a,b,3])
#     img[:,:,0] =np.dot(n,255)
#     img[:,:,1] =np.dot(n,255)
#     img[:,:,2] =np.dot(n,255)
#
#     cv2.imshow("image", img)
#     cv2.waitKey()
#     h = hog(img)
#     ang = range(0,360,int(360/18))
#     plt.bar(ang,h,width = 10)
#     plt.xlabel("Angulos")
#     plt.ylabel("Magnitudes")
#     plt.title("HOG del número "+str(i))
#     plt.show()
#     i += 1

while True:
    flag, frame = cap.read()
    if flag:
        start = time.time()
        print(nr.extrae_numeros(frame))
        end = time.time()
        print("exec time: ", end - start)
        # The frame is ready and already captured
        cv2.imshow('video', frame)
        pos_frame = cap.get(cv2.CAP_PROP_POS_FRAMES)
        #print(str(pos_frame)+" frames")
        cv2.waitKey()
    else:
        # The next frame is not ready, so we try to read it again
        cap.set(cv2.CAP_PROP_POS_FRAMES, pos_frame-1)
        prin("frame is not ready")
        # It is better to wait for a while for the next frame to be ready
        cv2.waitKey(1000)


    if cap.get(cv2.CAP_PROP_POS_FRAMES) == cap.get(cv2.CAP_PROP_FRAME_COUNT):
        # If the number of captured frames is equal to the total number of frames,
        # we stop
        break
